<%! func ManifestTmpl(w io.Writer, config Config) error %>
<%% import . "github.com/compozed/travel-agent/models" %%>
<%% import "strings" %%>
---

meta:
  pipeline:
    uri: https://github.com/bonzofenix/boshrelease-ta-deployment

  git:
    username: (( param "git username for ci bot commits when upgrading secrets" ))
    email: (( param "git email for ci bot commits when upgrading secrets" ))

  ubuntu_image_source:
    repository: bonzofenix/ubuntu-ci-tools
    tag: edge

  alpine_image_source:
    repository: bonzofenix/alpine-ci-tools
    tag: v0.0.5

<% if config.HasFeature("slack_updates") { %>
  slack:
    uri: (( param "Slack integration webhook uri" ))
<% } %>

<% for _, env := range config.Envs { %>
  <%= env.Name %>_deploy_dependencies: &<%= env.Name %>_deploy_dependencies
    <% if env.HasDependencies() { %>
    passed:
      <% for _, dependency := range env.DependsOn { %>
      - <%= dependency %>-deploy
      <% } %>
    <% } else { %>
    passed: []
    <% } %>
  <%= env.Name %>_runtime_dependencies: &<%= env.Name %>_runtime_dependencies
    <% if env.HasDependencies() { %>
    passed:
      <% for _, dependency := range env.DependsOn { %>
      - <%= dependency %>-runtime-config
      <% } %>
    <% } else { %>
    passed: []
    <% } %>
<% } %>

groups:
- name: deploy
  jobs:
<% if config.HasFeature("pin_versions") { %>
  - pin-resources
<% } %>
<% if config.HasFeature("slack_updates") { %>
  - boshrelease-updates
<% } %>
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-deploy
<% } %>

<% if config.HasFeature("update_cloud_config") { %>
- name: cloud_config
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-cloud-config
<% } %>
<% } %>

<% if config.HasFeature("update_runtime_config") { %>
- name: runtime_config
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-runtime-config
<% } %>
<% } %>

<% if config.HasEnvsWithFeature("allow_destroy") { %>
- name: destroy
  jobs:
<% for _, env := range config.EnvsWithFeature("allow_destroy") { %>
  - <%= env.Name %>-destroy
<% } %>
<% } %>

<% if config.HasEnvsWithFeature("backup") { %>
- name: backup
  jobs:
<% for _, env := range config.EnvsWithFeature("backup") { %>
  - <%= env.Name %>-backup
<% } %>

- name: restore
  jobs:
<% for _, env := range config.EnvsWithFeature("backup") { %>
  - <%= env.Name %>-restore
<% } %>
<% } %>

<% if config.HasFeature("restart_on_failure") { %>
- name: restart-on-failure
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-restart-on-failure
<% } %>
<% } %>

jobs:
<% if config.HasFeature("slack_updates") { %>
- name: boshrelease-updates
  plan:
  - in_parallel:
    - get: pipeline
    - get: metadata
<% for _, resource := range config.Resources { %>
    - get: <%= resource.Name %>
      params:
        tarball: false
<% } %>
  - task: boshrelease-version-notification
    file: pipeline/ci/tasks/boshrelease-version-notification.yml
    params:
      DEPLOYMENT_NAME:    (( grab meta.name ))
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.updates.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon_url ))
        text_file: output/boshrelease_version_notification
<% } %>

<% if config.HasFeature("pin_versions") { %>
- name: pin-resources
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= config.Name %>-pins
      trigger: true
      params:
        submodules: (( grab meta.git.submodules ))
        submodule_recursive: false
  - task: run
    file: pipeline/ci/tasks/pin-resources.yml
    params:
      CUSTOM_CA_CERTS:    (( grab meta.custom_ca_certs || "" ))
      DEBUG:              (( grab meta.debug || false ))
      PIPELINE_NAME:      <%= config.Name %>
      PINS_FILE:          (( grab meta.pins_file ))
      CONCOURSE_TARGET:   (( grab meta.concourse.target ))
      CONCOURSE_USERNAME: (( grab meta.concourse.user ))
      CONCOURSE_PASSWORD: (( grab meta.concourse.password ))
      CONCOURSE_TEAM:     (( grab meta.concourse.team ))
<% } %>

<% for _, env := range config.Envs { %>
- name: <%= env.Name %>-deploy
  old_name: <%= env.Name %>-upgrade
  serial: true
  plan:
  - in_parallel:
<% for _, resource := range config.Resources {  %>
  <% if(!strings.Contains(resource.Name, "latest")) {%>
    - get: <%= resource.Name %>
      <<: *<%= env.Name %>_deploy_dependencies
  <% } %>
<% } %>
    - get: pipeline
      <<: *<%= env.Name %>_deploy_dependencies
    - get: metadata
    - get: deploy-image
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules ))
        trigger: true
        submodule_recursive: false

<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    - put: lock
      params:
        claim: <%= env.Name %>
<% } %>

<% if env.HasFeature("create_uaa_clients") { %>
  - file: pipeline/ci/tasks/create_uaa_clients.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_CA_CERTS:      (( grab meta.custom_ca_certs || "" ))

      UAA_CLIENTS_FILE:     (( grab meta.<%= env.Name %>.uaa_clients_file ))
      VARS_FILE:            (( grab meta.<%= env.Name %>.vars_file ))
    task: create_uaa_clients
<% } %>

<% if env.HasFeature("backup") && env.Feature("backup") != "on_demand" { %>
  - file: pipeline/ci/tasks/backup.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_CA_CERTS:              (( grab meta.custom_ca_certs || "" ))


      DEPLOYMENT_NAME:    (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))
    on_success:
      put: <%= env.Name %>-s3-backup
      params:
        file: output/backup.tgz
    task: backup
<% } %>

  - file: pipeline/ci/tasks/deploy.yml
    image: deploy-image
    params: &<%= env.Name %>-params
      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.vault.vault_skip_verify || "false" ))

      BOSH_DEPLOYMENT:      (( grab meta.name ))
      BOSH_RECREATE:        (( grab meta.<%= env.Name %>.bosh_recreate || false ))
      BOSH_NO_REDACT:       (( grab meta.<%= env.Name %>.bosh_no_redact || false ))
      BOSH_DRY_RUN:         (( grab meta.<%= env.Name %>.bosh_dry_run || "" ))
      BOSH_FIX:             (( grab meta.<%= env.Name %>.bosh_fix || "" ))
      BOSH_SKIP_DRAIN:      (( grab meta.<%= env.Name %>.bosh_skip_drain || "" ))

      BOSH_CREATE_ENV:      <%= config.Feature("create_env") %>
      STATE_FILE:           (( grab meta.<%= env.Name %>.state_file || "" ))

      STORE_FILE:           (( grab meta.<%= env.Name %>.store_file || "" ))
      OPERATIONS_FILE:      (( grab meta.<%= env.Name %>.operations_file ))
      ERRANDS_FILE:         (( grab meta.<%= env.Name %>.errands_file || "" ))
      VARS_FILE:            (( grab meta.<%= env.Name %>.vars_file ))
      CREDS_FILE:           (( grab meta.<%= env.Name %>.creds_file ))
      MANIFEST_FILE:        (( grab meta.manifest_file ))

      CUSTOM_CA_CERTS:      (( grab meta.custom_ca_certs || "" ))

      YAML2VAULT_PREFIX:    (( grab meta.<%= env.Name %>.yaml2vault_prefix ))

      GIT_USERNAME:         ((grab meta.git.username))
      GIT_EMAIL:            ((grab meta.git.email))

      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))
    task: deploy

<% if env.HasFeature("set_teams") { %>
  - file: pipeline/ci/tasks/concourse/set_teams.yml
    params:
      ORGS_LIST_FILE:     (( grab meta.<%= env.Name %>.orgs_list_file ))
      CF_API_URI:         (( grab meta.<%= env.Name %>.cf.api ))
      CF_USER:            (( grab meta.<%= env.Name %>.cf.user ))
      CF_PASSWORD:        (( grab meta.<%= env.Name %>.cf.password ))
      CONCOURSE_TARGET:   (( grab meta.<%= env.Name %>.concourse.target ))
      CONCOURSE_USERNAME: (( grab meta.<%= env.Name %>.concourse.user ))
      CONCOURSE_PASSWORD: (( grab meta.<%= env.Name %>.concourse.password ))

      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))
    task: set_teams
<% } %>

<% if env.HasFeature("check_cluster") { %>
  - file: pipeline/ci/tasks/vault/check_cluster.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      CUSTOM_CA_CERTS:      (( grab meta.custom_ca_certs || "" ))

      VAULT_ADDR:           (( grab meta.<%= env.Name %>.<%= config.Name %>.address ))
      VAULT_TOKEN:          (( grab meta.<%= env.Name %>.<%= config.Name %>.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.<%= env.Name %>.<%= config.Name %>.vault_skip_verify || "false" ))
    task: check-cluster
<% } %>

<% if env.HasFeature("create_policies") { %>
  - file: pipeline/ci/tasks/vault/create_policies.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      CUSTOM_CA_CERTS:      (( grab meta.custom_ca_certs || "" ))

      VAULT_ADDR:           (( grab meta.<%= env.Name %>.<%= config.Name %>.address ))
      VAULT_TOKEN:          (( grab meta.<%= env.Name %>.<%= config.Name %>.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.<%= env.Name %>.vault.vault_skip_verify || "false" ))

      POLICY_FILES:         (( grab meta.<%= env.Name %>.vault.policy_files || "" ))
    task: create-policies
<% } %>

<% if config.HasFeature("update_cloud_config") { %>
  - file: pipeline/ci/tasks/bosh/update_cloud_config.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      CUSTOM_CA_CERTS:      (( grab meta.custom_ca_certs || "" ))

      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.vault.vault_skip_verify || "false" ))

      CREDS_FILE:           (( grab meta.<%= env.Name %>.creds_file ))
      VARS_FILE:                    (( grab meta.<%= env.Name %>.vars_file ))

      CLOUD_CONFIG_FILE:            (( grab meta.<%= env.Name %>.cloud_config_file ))

    task: update-cloud-config
<% } %>

<% if config.HasFeature("update_runtime_config") { %>
  - file: pipeline/ci/tasks/bosh/update_runtime_config.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      CUSTOM_CA_CERTS:                 (( grab meta.custom_ca_certs || "" ))

      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.vault.vault_skip_verify || "false" ))

      YAML2VAULT_PREFIX:    (( grab meta.<%= env.Name %>.yaml2vault_prefix ))

      CREDS_FILE:           (( grab meta.<%= env.Name %>.creds_file ))
      STORE_FILE:           (( grab meta.<%= env.Name %>.runtime_config_store_file ))
      VARS_FILE:           (( grab meta.<%= env.Name %>.vars_file ))

      RUNTIME_CONFIG_FILE:            (( grab meta.<%= env.Name %>.runtime_config_file ))

      GIT_USERNAME:         ((grab meta.git.username))
      GIT_EMAIL:            ((grab meta.git.email))

    task: update-runtime-config
<% } %>

  ensure: &<%= env.Name %>-ensure
    put: config
    resource: <%= env.Name %>-configs
    params:
      submodules: (( grab meta.git.submodules ))
      submodule_recursive: false
      repository: config-mod
      rebase: true
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    on_success:
      put: lock
      params:
        release: lock
<% } %>
<% if config.HasFeature("slack_updates") { %>
  on_success:
    do:
    - task: deploy-status-notification
      file: pipeline/ci/tasks/deploy-status-notification.yml
      params:
        PRODUCT_NAME: <%= config.Name %>
        BUILD_STATUS: success
    - put: notify
      params:
        channel:  (( grab meta.slack.updates.channel || "sadf" ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.success.icon_url ))
        text_file: output/deploy_status_notification
  on_failure:
    do:
    - task: deploy-status-notification
      file: pipeline/ci/tasks/deploy-status-notification.yml
      params:
        PRODUCT_NAME: <%= config.Name %>
        BUILD_STATUS: failure
    - put: notify
      params:
        channel:  (( grab meta.slack.updates.channel || "sadf" ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.success.icon_url ))
        text_file: output/deploy_status_notification

<% } %>

<% if env.HasFeature("allow_destroy") { %>
- name: <%= env.Name %>-destroy
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules ))
        submodule_recursive: false
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    - put: lock
      params:
        claim: <%= env.Name %>
<% } %>
  - task: destroy
    file: pipeline/ci/tasks/destroy.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_CA_CERTS:                 (( grab meta.custom_ca_certs || "" ))

      BOSH_DEPLOYMENT:      (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
  on_success:
    put: lock
    params:
      release: lock
<% } %>
<% } %>

<% if config.HasFeature("update_cloud_config") { %>
- name: <%= env.Name %>-cloud-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules ))
        submodule_recursive: false
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    - put: lock
      params:
        claim: <%= env.Name %>
<% } %>
  - file: pipeline/ci/tasks/bosh/update_cloud_config.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CREDS_FILE:                   (( grab meta.<%= env.Name %>.creds_file ))
      VARS_FILE:                    (( grab meta.<%= env.Name %>.vars_file ))
      CLOUD_CONFIG_FILE:            (( grab meta.<%= env.Name %>.cloud_config_file ))

      CUSTOM_CA_CERTS:                 (( grab meta.custom_ca_certs || "" ))
    task: update-cloud-config

<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
  ensure:
    put: lock
    params:
      release: lock
<% } %>
<% } %>

<% if config.HasFeature("update_runtime_config") { %>
- name: <%= env.Name %>-runtime-config
  serial: true
  plan:
  - in_parallel:
<% for _, resource := range config.Resources { %>
    - get: <%= resource.Name %>
      <<: *<%= env.Name %>_runtime_dependencies
<% } %>
    - get: pipeline
    - get: metadata
    - get: config
      resource: <%= env.Name %>-runtime-configs
      trigger: true
      params:
        submodules: (( grab meta.git.submodules ))
        submodule_recursive: false
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    - put: lock
      params:
        claim: <%= env.Name %>
<% } %>
  - file: pipeline/ci/tasks/bosh/update_runtime_config.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CREDS_FILE:                   (( grab meta.<%= env.Name %>.creds_file ))
      VARS_FILE:                    (( grab meta.<%= env.Name %>.vars_file ))
      STORE_FILE:                   (( grab meta.<%= env.Name %>.runtime_config_store_file ))
      RUNTIME_CONFIG_FILE:          (( grab meta.<%= env.Name %>.runtime_config_file ))

      GIT_USERNAME:         ((grab meta.git.username))
      GIT_EMAIL:            ((grab meta.git.email))

      YAML2VAULT_PREFIX:    (( grab meta.<%= env.Name %>.yaml2vault_prefix ))

      CUSTOM_CA_CERTS:                 (( grab meta.custom_ca_certs || "" ))
    task: update-runtime-config

  ensure: &<%= env.Name %>-ensure
    put: config
    resource: <%= env.Name %>-configs
    params:
      submodules: (( grab meta.git.submodules ))
      repository: config-mod
      rebase: true
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    on_success:
      put: lock
      params:
        release: lock
<% } %>
<% } %>

<% if env.HasFeature("backup") { %>
- name: <%= env.Name %>-restore
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    - put: lock
      params:
        claim: <%= env.Name %>
<% } %>
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules ))
        submodule_recursive: false
    - get: backup
      resource: <%= env.Name %>-s3-backup
      params:
        unpack: true
  - file: pipeline/ci/tasks/restore.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_CA_CERTS:                 (( grab meta.custom_ca_certs || "" ))

      DEPLOYMENT_NAME:    (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))

      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

    task: restore
<% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
  ensure:
    put: lock
    params:
      release: lock
<% } %>
<% } %>

<% if config.HasFeature("restart_on_failure") { %>
- name: <%= env.Name %>-restart-on-failure
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - get: monitor-schedule-<%= env.Name %>
      trigger: true
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules ))
        submodule_recursive: false
  - task: check_health
    file: pipeline/ci/tasks/logsearch/check_health.yml
    params:
      INTERVAL:           15m
      INDEX_PATTERN:      logs-app-*
      ELASTICSEARCH_IP:   (( grab meta.<%= env.Name %>.elasticsearch_ip ))
      ELASTICSEARCH_PORT: (( grab meta.<%= env.Name %>.elasticsearch_port ))
      DEBUG:              (( grab meta.<%= env.Name %>.debug || false ))
    on_failure:
      task: restart_ingestor
      file: pipeline/ci/tasks/logsearch/restart_ingestor.yml
      params:
        <<: *<%= env.Name %>-params
<% } %>

<% if env.HasFeature("backup") { %>
- name: <%= env.Name %>-backup
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    <% if env.Feature("backup") == "daily" { %>
    - get: every-day
      trigger: true
    <% } %>
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules ))
        submodule_recursive: false
    <% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
    - put: lock
      params:
        claim: <%= env.Name %>
    <% } %>
  - file: pipeline/ci/tasks/backup.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_CA_CERTS:                 (( grab meta.custom_ca_certs || "" ))

      DEPLOYMENT_NAME:    (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))
    on_success:
      put: <%= env.Name %>-s3-backup
      params:
        file: output/backup.tgz

    task: backup
  <% if config.HasFeature("lock_environment") && ! env.HasFeature("lock_environment") { %>
  ensure:
    put: lock
    params:
      release: lock
  <% } %>


<% } %>
<% } %>


resources:
<% for _, env := range config.Envs { %>
- name: <%= env.Name %>-configs
  type: git
  source:
    paths:      (( grab meta.<%= env.Name %>.configs_git_paths ))
    branch:      (( grab meta.configs.branch || "master" ))
    username:    (( grab meta.configs.username ))
    password:    (( grab meta.configs.password ))
    private_key: (( grab meta.configs.private_key ))
    uri:         (( grab meta.configs.uri ))

<% if config.HasFeature("update_runtime_config") { %>
- name: <%= env.Name %>-runtime-configs
  type: git
  source:
    paths:
    - default/<%= config.Name %>/runtime-config.yml
    - <%= env.Name %>/<%= config.Name %>/runtime-config.yml
    branch:      (( grab meta.configs.branch || "master" ))
    private_key: (( grab meta.configs.private_key ))
    username:    (( grab meta.configs.username ))
    password:    (( grab meta.configs.password ))
    uri:         (( grab meta.configs.uri ))
<% } %>

<% if config.HasFeature("restart_on_failure") { %>
- name: monitor-schedule-<%= env.Name %>
  type: time
  source:
    interval: 15m
<% } %>

<% if env.Feature("backup") == "daily" { %>
- name: every-day
  type: time
  source:
    interval: 24h
<% } %>

<% if env.HasFeature("backup") { %>
- name: <%= env.Name %>-s3-backup
  source:
    bucket:            (( grab meta.<%= env.Name %>.s3.bucket ))
    versioned_file:    <%= env.Name %>/<%= config.Name %>/backup.tgz
    access_key_id:     (( grab meta.<%= env.Name %>.s3.access_key_id ))
    secret_access_key: (( grab meta.<%= env.Name %>.s3.secret_access_key ))
  type: s3
<% } %>
<% } %>

<% if config.HasFeature("slack_updates") { %>
- name: notify
  type: slack-notification
  source:
    url: (( grab meta.slack.uri ))
<% } %>

<% if config.HasFeature("lock_environment") { %>
- name: lock
  type: pool
  source:
    uri:         (( grab meta.locks.uri ))
    branch:      (( grab meta.locks.branch || "master" ))
    private_key: (( grab meta.locks.private_key ))
    username:    (( grab meta.locks.username ))
    password:    (( grab meta.locks.password ))
    pool:        (( grab meta.locks.pool ))
<% } %>

- name: pipeline
  type: git
  source:
    branch:      (( grab meta.pipeline.branch || "master" ))
    uri:         (( grab meta.pipeline.uri ))


- name: metadata
  type: build-metadata

<% if config.HasFeature("pin_versions") { %>
- name: <%= config.Name %>-pins
  type: git
  source:
    paths:
    - (( concat "default/" meta.name "/pins.yml" ))
    branch:      (( grab meta.configs.branch || "master" ))
    private_key: (( grab meta.configs.private_key ))
    username:    (( grab meta.configs.username ))
    password:    (( grab meta.configs.password ))
    uri:         (( grab meta.configs.uri ))
<% } %>

- name: deploy-image
  type: docker-image
<% if config.HasFeature("create_env") { %>
  source: (( grab meta.ubuntu_image_source ))
<% } else { %>
  source: (( grab meta.alpine_image_source ))
<%  } %>

resource_types:
- name: build-metadata
  type: docker-image
  source:
    repository: mastertinner/build-metadata-resource

<% if config.HasFeature("slack_updates") { %>
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
<% } %>
