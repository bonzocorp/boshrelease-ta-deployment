<%! func ManifestTmpl(w io.Writer, config Config) error %>
<%% import . "github.com/compozed/travel-agent/models" %%>
---

meta:
  pipeline:
    uri: https://github.com/bonzofenix/boshrelease-ta-deployment

  git:
    username: (( param "git username for ci bot commits when upgrading secrets" ))
    email: (( param "git email for ci bot commits when upgrading secrets" ))

<% if config.HasFeature("slack_updates") { %>
  slack_updates:
    uri: (( param "Slack integration webhook uri" ))
<% } %>

<% for _, env := range config.Envs { %>
  <%= env.Name %>_upgrade_dependencies: &<%= env.Name %>_upgrade_dependencies
    <% if env.HasDependencies() { %>
    passed:
      <% for _, dependency := range env.DependsOn { %>
      - <%= dependency %>-upgrade
      <% } %>
    <% } else { %>
    passed: []
    <% } %>

  <%= env.Name %>_update_dependencies: &<%= env.Name %>_update_dependencies
    <% if env.HasDependencies() { %>
    passed:
      <% for _, dependency := range env.DependsOn { %>
      - <%= dependency %>-update
      <% } %>
    <% } else { %>
    passed: []
    <% } %>
<% } %>

groups:
<% if config.HasFeature("update_deployment") { %>
- name: update
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-update
<% } %>
<% } %>

- name: upgrade
  jobs:
<% if config.HasFeature("pin_versions") { %>
  - pin-resources
<% } %>
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-upgrade
<% } %>

<% if config.HasFeature("update_cloud_config") { %>
- name: cloud_config
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-cloud-config
<% } %>
<% } %>

<% if config.HasFeature("update_runtime_config") { %>
- name: runtime_config
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-runtime-config
<% } %>
<% } %>

<% if config.HasEnvsWithFeature("allow_destroy") { %>
- name: destroy
  jobs:
<% for _, env := range config.EnvsWithFeature("allow_destroy") { %>
  - <%= env.Name %>-destroy
<% } %>
<% } %>

<% if config.HasEnvsWithFeature("backup") { %>
- name: backup
  jobs:
<% for _, env := range config.EnvsWithFeature("backup") { %>
  - <%= env.Name %>-backup
<% } %>

- name: restore
  jobs:
<% for _, env := range config.EnvsWithFeature("backup") { %>
  - <%= env.Name %>-restore
<% } %>
<% } %>

<% if config.HasFeature("restart_on_failure") { %>
- name: restart-on-failure
  jobs:
<% for _, env := range config.Envs { %>
  - <%= env.Name %>-restart-on-failure
<% } %>
<% } %>

jobs:
<% if config.HasFeature("pin_versions") { %>
- name: pin-resources
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= config.Name %>-pins
      trigger: true
  - task: run
    file: pipeline/ci/tasks/pin-resources.yml
    params:
      CUSTOM_ROOT_CA:                 (( grab meta.custom_root_ca || "" ))

      CUSTOM_INTERMEDIATE_CA:         (( grab meta.custom_intermediate_ca || "" ))
      DEBUG:              (( grab meta.debug || false ))
      PIPELINE_NAME:      <%= config.Name %>
      PINS_FILE:          (( grab meta.pins_file ))
      CONCOURSE_TARGET:   (( grab meta.concourse.target ))
      CONCOURSE_USERNAME: (( grab meta.concourse.user ))
      CONCOURSE_PASSWORD: (( grab meta.concourse.password ))
      CONCOURSE_TEAM:     (( grab meta.concourse.team ))
<% } %>

<% for _, env := range config.Envs { %>
- name: <%= env.Name %>-upgrade
  serial: true
  plan:
  - in_parallel:
<% for _, resource := range config.Resources { %>
    - get: <%= resource.Name %>
      <<: *<%= env.Name %>_upgrade_dependencies
<% } %>
    - get: pipeline
      <<: *<%= env.Name %>_upgrade_dependencies
    - get: metadata
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules || null ))
        submodule_recursive: false

    - put: lock
      params:
        claim: <%= env.Name %>

<% if env.HasFeature("create_uaa_clients") { %>
  - file: pipeline/ci/tasks/create_uaa_clients.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      UAA_CLIENTS_FILE:             (( grab meta.<%= env.Name %>.uaa_clients_file ))
      VARS_FILE:            (( grab meta.<%= env.Name %>.vars_file ))
    task: create_uaa_clients
<% } %>

<% if env.HasFeature("backup") && env.Feature("backup") != "on_demand" { %>
  - file: pipeline/ci/tasks/backup.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))


      DEPLOYMENT_NAME:    (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))
    on_success:
      put: <%= env.Name %>-s3-backup
      params:
        file: output/backup.tgz
    task: backup
<% } %>

  - file: pipeline/ci/tasks/upgrade.yml
    params: &<%= env.Name %>-params
      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.vault.vault_skip_verify || "false" ))

      BOSH_DEPLOYMENT:      (( grab meta.name ))
      BOSH_OPERATIONS:      (( grab meta.<%= env.Name %>.bosh_operations ))
      BOSH_ERRANDS:         (( grab meta.<%= env.Name %>.bosh_errands || "" ))
      BOSH_RECREATE:        (( grab meta.<%= env.Name %>.bosh_recreate || false ))
      BOSH_NO_REDACT:       (( grab meta.<%= env.Name %>.bosh_no_redact || false ))
      BOSH_DRY_RUN:         (( grab meta.<%= env.Name %>.bosh_dry_run || "" ))
      BOSH_FIX:             (( grab meta.<%= env.Name %>.bosh_fix || "" ))
      BOSH_SKIP_DRAIN:      (( grab meta.<%= env.Name %>.bosh_skip_drain || "" ))
      BOSH_CREATE_ENV:      (( grab meta.<%= env.Name %>.bosh_create_env || false ))

      STORE_FILE:           (( grab meta.<%= env.Name %>.store_file ))
      STATE_FILE:           (( grab meta.<%= env.Name %>.state_file || "" ))
      VARS_FILE:            (( grab meta.<%= env.Name %>.vars_file ))
      CREDS_FILE:           (( grab meta.<%= env.Name %>.creds_file ))
      MANIFEST_FILE:        (( grab meta.manifest_file ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      YAML2VAULT_PREFIX:    (( grab meta.<%= env.Name %>.yaml2vault_prefix ))

      GIT_USERNAME:         ((grab meta.git.username))
      GIT_EMAIL:            ((grab meta.git.email))

      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))
    task: deploy

<% if env.HasFeature("set_teams") { %>
  - file: pipeline/ci/tasks/concourse/set_teams.yml
    params:
      ORGS_LIST_FILE:     (( grab meta.<%= env.Name %>.orgs_list_file ))
      CF_API_URI:         (( grab meta.<%= env.Name %>.cf.api ))
      CF_USER:            (( grab meta.<%= env.Name %>.cf.user ))
      CF_PASSWORD:        (( grab meta.<%= env.Name %>.cf.password ))
      CONCOURSE_TARGET:   (( grab meta.<%= env.Name %>.concourse.target ))
      CONCOURSE_USERNAME: (( grab meta.<%= env.Name %>.concourse.user ))
      CONCOURSE_PASSWORD: (( grab meta.<%= env.Name %>.concourse.password ))

      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))
    task: set_teams
<% } %>

<% if env.HasFeature("check_cluster") { %>
  - file: pipeline/ci/tasks/vault/check_cluster.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      VAULT_ADDR:           (( grab meta.<%= env.Name %>.vault.address ))
      VAULT_TOKEN:          (( grab meta.<%= env.Name %>.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.<%= env.Name %>.vault.vault_skip_verify || "false" ))
    task: check-cluster
<% } %>

<% if config.HasFeature("update_cloud_config") { %>
  - file: pipeline/ci/tasks/bosh/update_cloud_config.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.vault.vault_skip_verify || "false" ))

      CREDS_FILE:           (( grab meta.<%= env.Name %>.creds_file ))
      VARS_FILE:                    (( grab meta.<%= env.Name %>.vars_file ))

      CLOUD_CONFIG_FILE:            (( grab meta.<%= env.Name %>.cloud_config_file ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))
    task: update-cloud-config
<% } %>

<% if config.HasFeature("update_runtime_config") { %>
  - file: pipeline/ci/tasks/bosh/update_runtime_config.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:    (( grab meta.vault.vault_skip_verify || "false" ))

      CREDS_FILE:           (( grab meta.<%= env.Name %>.creds_file ))

      RUNTIME_CONFIG_FILE:            (( grab meta.<%= env.Name %>.runtime_config_file ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))
    task: update-runtime-config
<% } %>

  ensure: &<%= env.Name %>-ensure
    put: config
    resource: <%= env.Name %>-configs
    params:
      repository: config-mod
      rebase: true
    on_success:
      put: lock
      params:
        release: lock
<% if config.HasFeature("slack_updates") { %>
  on_success:
    put: notify
    params:
      channel:  (( grab meta.slack_updates.channel ))
      username: (( grab meta.slack_updates.username ))
      icon_url: (( grab meta.slack_updates.success.icon_url ))
      text: "Finish <%= config.Name %> boshrelease deployment in <%= env.Name %> with successfully"
  on_failure:
    put: notify
    params:
      channel:  (( grab meta.slack_updates.channel ))
      username: (( grab meta.slack_updates.username ))
      icon_url: (( grab meta.slack_updates.failure.icon_url ))
      text: "Finish <%= config.Name %> boshrelease deployment in <%= env.Name %> with failure"
<% } %>


<% if config.HasFeature("update_deployment") { %>
- name: <%= env.Name %>-update
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
      <<: *<%= env.Name %>_update_dependencies
    - get: metadata
    - get: config
      resource: <%= env.Name %>-configs
      params:
        submodules: (( grab meta.git.submodules || null ))
        submodule_recursive: false
    - put: lock
      params:
        claim: <%= env.Name %>
<% if env.HasFeature("create_uaa_clients") { %>
  - file: pipeline/ci/tasks/create_uaa_clients.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      VAULT_ADDR:           (( grab meta.vault.address ))
      VAULT_TOKEN:          (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      UAA_CLIENTS_FILE:             (( grab meta.<%= env.Name %>.uaa_clients_file ))
      VARS_FILE:            (( grab meta.<%= env.Name %>.vars_file ))
    task: create_uaa_clients
<% } %>
  - file: pipeline/ci/tasks/update.yml
    params:
      <<: *<%= env.Name %>-params
    task: deploy
  ensure:
    <<: *<%= env.Name %>-ensure
<% } %>

<% if env.HasFeature("allow_destroy") { %>
- name: <%= env.Name %>-destroy
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= env.Name %>-configs
    - put: lock
      params:
        claim: <%= env.Name %>
  - task: destroy
    file: pipeline/ci/tasks/destroy.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      BOSH_DEPLOYMENT:      (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))
  on_success:
    put: lock
    params:
      release: lock
<% } %>

<% if config.HasFeature("update_cloud_config") { %>
- name: <%= env.Name %>-cloud-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= env.Name %>-configs
    - put: lock
      params:
        claim: <%= env.Name %>
  - file: pipeline/ci/tasks/bosh/update_cloud_config.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CREDS_FILE:                   (( grab meta.<%= env.Name %>.creds_file ))
      VARS_FILE:                    (( grab meta.<%= env.Name %>.vars_file ))
      CLOUD_CONFIG_FILE:            (( grab meta.<%= env.Name %>.cloud_config_file ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))
    task: update-cloud-config

  ensure:
    put: lock
    params:
      release: lock

<% } %>

<% if config.HasFeature("update_runtime_config") { %>
- name: <%= env.Name %>-runtime-config
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - get: config
      resource: <%= env.Name %>-configs
    - put: lock
      params:
        claim: <%= env.Name %>
  - file: pipeline/ci/tasks/bosh/update_runtime_config.yml
    params:
      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CREDS_FILE:                   (( grab meta.<%= env.Name %>.creds_file ))
      VARS_FILE:                    (( grab meta.<%= env.Name %>.vars_file ))
      RUNTIME_CONFIG_FILE:            (( grab meta.<%= env.Name %>.runtime_config_file ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))
    task: update-runtime-config

  ensure:
    put: lock
    params:
      release: lock
<% } %>

<% if env.HasFeature("backup") { %>
- name: <%= env.Name %>-restore
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - put: lock
      params:
        claim: <%= env.Name %>
    - get: config
      resource: <%= env.Name %>-configs
    - get: backup
      resource: <%= env.Name %>-s3-backup
      params:
        unpack: true
  - file: pipeline/ci/tasks/restore.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      DEPLOYMENT_NAME:    (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))

      DEBUG:                (( grab meta.<%= env.Name %>.debug || false ))

    task: restore
  ensure:
    put: lock
    params:
      release: lock
<% } %>

<% if config.HasFeature("restart_on_failure") { %>
- name: <%= env.Name %>-restart-on-failure
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    - get: monitor-schedule-<%= env.Name %>
      trigger: true
    - get: config
      resource: <%= env.Name %>-configs
  - task: check_health
    file: pipeline/ci/tasks/logsearch/check_health.yml
    params:
      INTERVAL:           15m
      INDEX_PATTERN:      logs-app-*
      ELASTICSEARCH_IP:   (( grab meta.<%= env.Name %>.elasticsearch_ip ))
      ELASTICSEARCH_PORT: (( grab meta.<%= env.Name %>.elasticsearch_port ))
      DEBUG:              (( grab meta.<%= env.Name %>.debug || false ))
    on_failure:
      task: restart_ingestor
      file: pipeline/ci/tasks/logsearch/restart_ingestor.yml
      params:
        <<: *<%= env.Name %>-params
<% } %>

<% if env.HasFeature("backup") { %>
- name: <%= env.Name %>-backup
  serial: true
  plan:
  - in_parallel:
    - get: pipeline
    <% if env.Feature("backup") == "daily" { %>
    - get: every-day
      trigger: true
    <% } %>
    - get: config
      resource: <%= env.Name %>-configs
    - put: lock
      params:
        claim: <%= env.Name %>
  - file: pipeline/ci/tasks/backup.yml
    params:
      VAULT_ADDR:                   (( grab meta.vault.address ))
      VAULT_TOKEN:                  (( grab meta.vault.token ))
      VAULT_SKIP_VERIFY:            (( grab meta.vault.vault_skip_verify || "false" ))

      CUSTOM_ROOT_CA:                 ((grab meta.custom_root_ca || ""))
      CUSTOM_INTERMEDIATE_CA:         ((grab meta.custom_intermediate_ca || ""))

      DEPLOYMENT_NAME:    (( grab meta.name ))
      CREDS_FILE:         (( grab meta.<%= env.Name %>.creds_file ))
    on_success:
      put: <%= env.Name %>-s3-backup
      params:
        file: output/backup.tgz

    task: backup
  ensure:
    put: lock
    params:
      release: lock


<% } %>
<% } %>


resources:
<% for _, env := range config.Envs { %>
- name: <%= env.Name %>-configs
  type: git
  source:
    paths:      (( grab meta.<%= env.Name %>.configs_git_paths ))
    branch:      (( grab meta.configs.branch || "master" ))
    private_key: (( grab meta.configs.private_key ))
    uri:         (( grab meta.configs.uri ))


<% if config.HasFeature("restart_on_failure") { %>
- name: monitor-schedule-<%= env.Name %>
  type: time
  source:
    interval: 15m
<% } %>

<% if env.Feature("backup") == "daily" { %>
- name: every-day
  type: time
  source:
    interval: 24h
<% } %>

<% if env.HasFeature("backup") { %>
- name: <%= env.Name %>-s3-backup
  source:
    bucket:            (( grab meta.<%= env.Name %>.s3.bucket ))
    versioned_file:    <%= env.Name %>/<%= config.Name %>/backup.tgz
    access_key_id:     (( grab meta.<%= env.Name %>.s3.access_key_id ))
    secret_access_key: (( grab meta.<%= env.Name %>.s3.secret_access_key ))
  type: s3
<% } %>
<% } %>

<% if config.HasFeature("slack_updates") { %>
- name: notify
  type: slack-notification
  source:
    url: (( grab meta.slack_updates.uri ))
<% } %>

- name: lock
  type: pool
  source:
    uri:         (( grab meta.locks.uri ))
    branch:      (( grab meta.locks.branch || "master" ))
    private_key: (( grab meta.locks.private_key ))
    pool:        (( grab meta.locks.pool ))

- name: pipeline
  type: git
  source:
    branch:      (( grab meta.pipeline.branch || "master" ))
    uri:         (( grab meta.pipeline.uri ))


- name: metadata
  type: build-metadata

<% if config.HasFeature("pin_versions") { %>
- name: <%= config.Name %>-pins
  type: git
  source:
    paths:
    - (( concat "default/" meta.name "/pins.yml" ))
    branch:      (( grab meta.configs.branch || "master" ))
    private_key: (( grab meta.configs.private_key ))
    uri:         (( grab meta.configs.uri ))
<% } %>

resource_types:
- name: build-metadata
  type: docker-image
  source:
    repository: mastertinner/build-metadata-resource

<% if config.HasFeature("slack_updates") { %>
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
<% } %>
